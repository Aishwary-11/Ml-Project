# -*- coding: utf-8 -*-
"""ML Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzVzYzyLQPYV-Tk9f_HjmyE_9U36u2et
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np
def hour_range_to_numeric(hour_str):
    start, end = hour_str.split('-')
    start_hour = int(start.split(':')[0])
    end_hour = int(end.split(':')[0])
    if end_hour == 1:
        end_hour += 12
    return (start_hour + end_hour) / 2
df = pd.read_csv('/content/ml dataset1.csv')

df['Hour'] = df['Hour'].apply(hour_range_to_numeric)
X = df[['SegmentID', 'Week', 'Hour']]
y = df['Traffic Volume']

model_rf = RandomForestRegressor(random_state=60)

model_rf.fit(X, y)
def predict_traffic_volume():
    segment_id = int(input("Enter Segment ID: "))
    week = int(input("Enter Week number: "))
    hour_str = input("Enter Hour range (e.g., '12:00-1:00 AM'): ")
    hour = hour_range_to_numeric(hour_str)
    if(segment_id not in df['SegmentID'].values):
        print("Invalid Segment ID")
        return


    new_data_rf = pd.DataFrame({'SegmentID': [segment_id], 'Week': [week], 'Hour': [hour]})


    predicted_volume_rf = model_rf.predict(new_data_rf)

    print(f'Predicted Traffic Volume: {predicted_volume_rf[0]:.2f}')


    y_pred_rf = model_rf.predict(X)
    mse_rf = mean_squared_error(y, y_pred_rf)
    rmse_rf = np.sqrt(mse_rf)

    print(f'Random Forest - Mean Squared Error (MSE): {mse_rf:.2f}')
    print(f'Random Forest - Root Mean Squared Error (RMSE): {rmse_rf:.2f}')

predict_traffic_volume()

import pandas as pd
from sklearn.ensemble import RandomForestRegressor, VotingRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from xgboost import XGBRegressor
import numpy as np

def hour_range_to_numeric(hour_str):
    start, end = hour_str.split('-')
    start_hour = int(start.split(':')[0])
    end_hour = int(end.split(':')[0])
    if end_hour == 1:
        end_hour += 12
    return (start_hour + end_hour) / 2

df = pd.read_csv('/content/ml dataset1.csv')

df['Hour'] = df['Hour'].apply(hour_range_to_numeric)

X = df[['SegmentID', 'Week', 'Hour']]
y = df['Traffic Volume']
model_rf = RandomForestRegressor(random_state=42)
model_xgb = XGBRegressor(random_state=42)
ensemble_model = VotingRegressor(estimators=[
    ('Random Forest', model_rf),
    ('XGBoost', model_xgb)
])
ensemble_model.fit(X, y)
def predict_traffic_volume():
    segment_id = int(input("Enter Segment ID: "))
    week = int(input("Enter Week number: "))
    hour_str = input("Enter Hour range (e.g., '12:00-1:00 AM'): ")
    hour = hour_range_to_numeric(hour_str)
    if(segment_id not in df['SegmentID'].values):
        print("Invalid Segment ID")
        return

    new_data = pd.DataFrame({'SegmentID': [segment_id], 'Week': [week], 'Hour': [hour]})

    predicted_volume = ensemble_model.predict(new_data)

    print(f'Predicted Traffic Volume (Ensemble): {predicted_volume[0]:.2f}')


    y_pred = ensemble_model.predict(X)
    mse = mean_squared_error(y, y_pred)
    rmse = np.sqrt(mse)

    print(f'Ensemble - Mean Squared Error (MSE): {mse:.2f}')
    print(f'Ensemble - Root Mean Squared Error (RMSE): {rmse:.2f}')
predict_traffic_volume()

import pandas as pd
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt

df = pd.read_csv('/content/ml dataset1.csv')
X = df[['Traffic Volume']]

isolation_forest = IsolationForest(contamination=0.05, random_state=42)

isolation_forest.fit(X)
df['anomaly_score'] = isolation_forest.decision_function(X)
df['anomaly'] = isolation_forest.predict(X)

plt.figure(figsize=(10, 6))
plt.hist(df['anomaly_score'], bins='auto')
plt.title('Anomaly Score Distribution')
plt.xlabel('Anomaly Score')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()
anomalies = df[df['anomaly'] == -1]
anomalies.to_csv('/content/anomalies.csv', index=False)

import pandas as pd
from sklearn.svm import OneClassSVM
import matplotlib.pyplot as plt

df = pd.read_csv('/content/ml dataset1.csv')

X = df[['Traffic Volume']]

svm = OneClassSVM(nu=0.05)

svm.fit(X)
df['anomaly'] = svm.predict(X)

plt.figure(figsize=(10, 6))
plt.hist(df['anomaly'], bins='auto')
plt.title('Anomaly Detection using One-Class SVM')
plt.xlabel('Anomaly Label (-1: Anomaly, 1: Normal)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

anomalies = df[df['anomaly'] == -1]
print("Detected Anomalies:")
anomalies.to_csv('/content/anomalies_svm.csv', index=False)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder

def load_data(file_path):
    df = pd.read_csv(file_path)
    return df

def preprocess_data(df, encoder=None):

    df['Hour'] = df['Hour'].apply(lambda x: int(x.split(':')[0]) + 0.5 if '-' in x else int(x.split(':')[0]))


    combined_categories = pd.concat([df['From'], df['To']])


    if encoder is None:
        encoder = LabelEncoder()
        encoder.fit(combined_categories)

    df['From_encoded'] = encoder.transform(df['From'])
    df['To_encoded'] = encoder.transform(df['To'])

    return df, encoder


def train_model(df):
    try:
        X = df[['From_encoded', 'To_encoded', 'Week', 'Hour']]
        y = df['Traffic Volume'].apply(lambda x: 'high' if x > 30 else 'low')


        if y.isnull().any():
            raise ValueError("Target variable 'y' contains null values.")
        if not set(y.unique()).issubset({'high', 'low'}):
            raise ValueError(f"Target variable 'y' contains unexpected values: {set(y.unique()) - {'high', 'low'}}")


        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


        clf = DecisionTreeClassifier(random_state=42)


        clf.fit(X_train, y_train)


        y_pred = clf.predict(X_test)


        print("Classification Report:")
        print(classification_report(y_test, y_pred))
        print("Accuracy:", accuracy_score(y_test, y_pred))

        return clf, encoder
    except KeyError as e:
        print(f"Key error: {e}. Please check if all necessary columns are present in the dataframe.")
    except ValueError as e:
        print(f"Value error: {e}. Please check the target variable 'Traffic Volume' for unexpected values or nulls.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


def predict_traffic_condition(clf, encoder, user_from, user_to, week, hour):
    if user_from not in df['From'].values or user_to not in df['To'].values:
        return "Invalid input"
    else:
        user_from_encoded = encoder.transform([user_from])[0]
        user_to_encoded = encoder.transform([user_to])[0]
        user_input = pd.DataFrame({'From_encoded': [user_from_encoded], 'To_encoded': [user_to_encoded], 'Week': [week], 'Hour': [hour]})
        predicted_condition = clf.predict(user_input)[0]
        return predicted_condition


if __name__ == "__main__":

    file_path = '/content/ml dataset1.csv'
    df = load_data(file_path)
    df, encoder = preprocess_data(df)


    trained_model, encoder = train_model(df)

    if trained_model is not None:

        user_from = input("Enter 'From' location: ")
        user_to = input("Enter 'To' location: ")
        week = int(input("Enter week number (e.g., 2): "))
        hour = float(input("Enter hour (e.g., 12.0 for 12 PM, 0.5 for 12:30 AM): "))


        predicted_condition = predict_traffic_condition(trained_model, encoder, user_from, user_to, week, hour)
        print(f"Predicted Traffic Condition from {user_from} to {user_to} at week {week} and hour {hour}: {predicted_condition}")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder
from datetime import datetime

def load_data(file_path):
    try:
        df = pd.read_csv(file_path)
        return df
    except FileNotFoundError:
        print(f"File '{file_path}' not found.")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while loading the data: {e}")
        return None

def preprocess_data(df, encoder=None):
    try:
        # Extract hour from the 'Hour' column and handle '-' format
        df['Hour'] = df['Hour'].apply(lambda x: int(x.split(':')[0]) + 0.5 if '-' in x else int(x.split(':')[0]))

        # Extract day and month from the 'Date' column
        df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
        df['Day'] = df['Date'].dt.day
        df['Month'] = df['Date'].dt.month

        # Combine 'From' and 'To' columns to encode together
        combined_categories = pd.concat([df['From'], df['To']])

        if encoder is None:
            encoder = LabelEncoder()
            encoder.fit(combined_categories)

        df['From_encoded'] = encoder.transform(df['From'])
        df['To_encoded'] = encoder.transform(df['To'])

        return df, encoder
    except KeyError as e:
        print(f"Key error: {e}. Please check if all necessary columns are present in the dataframe.")
        return None, None
    except Exception as e:
        print(f"An unexpected error occurred during preprocessing: {e}")
        return None, None

def train_model(df):
    try:
        X = df[['From_encoded', 'To_encoded', 'Week', 'Hour', 'Day', 'Month']]
        y = df['Traffic Volume'].apply(lambda x: 'high' if x > 30 else 'low')

        if y.isnull().any():
            raise ValueError("Target variable 'y' contains null values.")
        if not set(y.unique()).issubset({'high', 'low'}):
            raise ValueError(f"Target variable 'y' contains unexpected values: {set(y.unique()) - {'high', 'low'}}")

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        clf = DecisionTreeClassifier(random_state=42)
        clf.fit(X_train, y_train)

        y_pred = clf.predict(X_test)

        print("Classification Report:")
        print(classification_report(y_test, y_pred))
        print("Accuracy:", accuracy_score(y_test, y_pred))

        return clf, clf.classes_
    except KeyError as e:
        print(f"Key error: {e}. Please check if all necessary columns are present in the dataframe.")
        return None, None
    except ValueError as e:
        print(f"Value error: {e}. Please check the target variable 'Traffic Volume' for unexpected values or nulls.")
        return None, None
    except Exception as e:
        print(f"An unexpected error occurred during model training: {e}")
        return None, None

def predict_traffic_condition(clf, encoder, df_classes, user_from, user_to, week, hour, date):
    try:
        if user_from not in encoder.classes_ or user_to not in encoder.classes_:
          print("Invalid input: Location not found.")
          return

        user_from_encoded = encoder.transform([user_from])[0]
        user_to_encoded = encoder.transform([user_to])[0]

        user_input = pd.DataFrame({'From_encoded': [user_from_encoded], 'To_encoded': [user_to_encoded], 'Week': [week], 'Hour': [hour], 'Date': [date]})

        # Extract day and month from user-input date
        user_input['Date'] = pd.to_datetime(user_input['Date'], format='%d-%m-%Y')
        user_input['Day'] = user_input['Date'].dt.day
        user_input['Month'] = user_input['Date'].dt.month

        predicted_class = clf.predict(user_input[['From_encoded', 'To_encoded', 'Week', 'Hour', 'Day', 'Month']])[0]
        predicted_condition = 'high' if predicted_class == df_classes[1] else 'low'

        return predicted_condition
    except Exception as e:
        return f"Prediction error: {e}. Please check your inputs and try again."

if __name__ == "__main__":
    try:
        file_path = '/content/ml dataset1.csv'
        df = load_data(file_path)

        if df is not None:
            df, encoder = preprocess_data(df)

            if df is not None and encoder is not None:
                trained_model, df_classes = train_model(df)

                if trained_model is not None and df_classes is not None:
                    user_from = input("Enter 'From' location: ")
                    user_to = input("Enter 'To' location: ")
                    week = int(input("Enter week number (e.g., 2): "))
                    hour = float(input("Enter hour (e.g., 12.0 for 12 PM, 0.5 for 12:30 AM): "))
                    date_str = input("Enter date (format DD-MM-YYYY): ")

                    predicted_condition = predict_traffic_condition(trained_model, encoder, df_classes, user_from, user_to, week, hour, date_str)
                    print(f"Predicted Traffic Condition from {user_from} to {user_to} at week {week}, hour {hour}, and date {date_str}: {predicted_condition}")
                else:
                    print("Failed to train model.")
            else:
                print("Failed to preprocess data.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")